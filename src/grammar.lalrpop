// -*- mode: rust; fill-column: 80 -*-

use ast::*;
use std::str::FromStr;

grammar;

pub Program: Program = {
    <items:TopItem*> => Program { items }
}

TopItem: TopItem = {
    "module" <name:Id> "{" <items:ModItem*> "}" => TopItem::Mod(Module { name, items }),
    <text:JSItem> => TopItem::Js(text)
}

ModItem: ModItem = {
    "extern" <mutable:VarOrConst> <name:Id> ":" <ty:Type> ";" => {
        let init = Box::new(Expr{ty:None, u:Uxpr::Void});
        ModItem::Var(Box::new(GlobalVar {mutable, exported:false, imported:true, name, ty, init}))
    },

    <v:"pub"?> <mutable:VarOrConst> <name:Id> ":" <ty:Type> "=" <init:Expr> ";" => {
        let exported = if let Some(_) = v { true } else { false };
        ModItem::Var(Box::new(GlobalVar {mutable, exported, imported:false, name, ty, init}))
    },

    "extern" "fn" <name:Id> <formals:Formals> <retn:Return?> ";" => {
        let body = Box::new(Block { ty: None, items: vec![] });
        ModItem::Fn(Box::new(FnDef {exported:false, imported:true, name, formals, retn, body, locals: None}))
    },

    <v:"pub"?> "fn" <name:Id> <formals:Formals> <retn:Return?> <body:Block> => {
        let exported = if let Some(_) = v { true } else { false };
        ModItem::Fn(Box::new(FnDef {exported, imported:false, name, formals, retn, body, locals: None}))
    }
}

Formals: Vec<(Id, Type)> = {
    "(" <fs:(<Formal> ",")*> <f:Formal?> ")" =>
        match f {
            None => fs,
            Some(x) => { let mut v = fs; v.push(x); v }
        }
}
        
Formal: (Id, Type) = {
    <name:Id> ":" <t:Type> => (name, t)
}

Return: Type = {
    "->" <t:Type> => t
}

VarOrConst: bool = {
    "var" => true,
    "const" => false
}

Type: Type = {
    "i32" => Type::I32,
    "i64" => Type::I64,
    "f32" => Type::F32,
    "f64" => Type::F64,
    "anyref" => Type::AnyRef
}

Id: Id = {
    // Here we want to use the string_cache atoms instead, and we want to use those
    // everywhere, no more strings!
    <n:Name> => Id{name:n}
}

Block: Box<Block> = {
    "{" <first:BlockItem> <middle:(";" <BlockItem>)*> <semi:";"?> "}" => {
        let mut items = middle;
        items.insert(0, first);
        if let Some(_) = semi {
            items.push(BlockItem::Expr(Box::new(Expr{ty:None, u:Uxpr::Void})));
        }
        Box::new(Block { ty: None, items })
    }
}

BlockItem: BlockItem = {
    "let" <name:Id> ":" <ty:Type> "=" <init:Expr> => BlockItem::Let(Box::new(LetDefn {name, ty, init})),
    <e:Expr> => BlockItem::Expr(e)
}

Expr: Box<Expr> = {
    AssignExpr
}

AssignExpr: Box<Expr> = {
    <lhs:Id> "=" <rhs:RelationalExpr> => Box::new(Expr{ty:None, u:Uxpr::Assign{lhs:LValue::Id(lhs), rhs}}),
    RelationalExpr
}

RelationalExpr: Box<Expr> = {
    <lhs:RelationalExpr> <op:Relop> <rhs:BitOrExpr> => box_binop(None, op, lhs, rhs),
    BitOrExpr
}

Relop: Binop = {
    "<"   => Binop::Less,
    "<="  => Binop::LessOrEqual,
    ">"   => Binop::Greater,
    ">="  => Binop::GreaterOrEqual,
    "<u"  => Binop::ULess,
    "<=u" => Binop::ULessOrEqual,
    ">u"  => Binop::UGreater,
    ">=u" => Binop::UGreaterOrEqual,
    "=="  => Binop::Equal,
    "!="  => Binop::NotEqual
}

BitOrExpr: Box<Expr> = {
    <lhs:BitOrExpr> "|" <rhs:BitXorExpr> => box_binop(None, Binop::BitOr, lhs, rhs),
    BitXorExpr
}

BitXorExpr: Box<Expr> = {
    <lhs:BitXorExpr> "^" <rhs:BitAndExpr> => box_binop(None, Binop::BitXor, lhs, rhs),
    BitAndExpr
}

BitAndExpr: Box<Expr> = {
    <lhs:BitAndExpr> "&" <rhs:BitShiftExpr> => box_binop(None, Binop::BitAnd, lhs, rhs),
    BitShiftExpr
}

BitShiftExpr: Box<Expr> = {
    <lhs:BitShiftExpr> <op:Shiftop> <rhs:AddExpr> => box_binop(None, op, lhs, rhs),
    AddExpr
}

Shiftop: Binop = {
    "<<" => Binop::ShiftLeft,
    ">>" => Binop::ShiftRight,
    ">>u" => Binop::UShiftRight
}

AddExpr: Box<Expr> = {
    <lhs:AddExpr> <op:Addop> <rhs:MulExpr> => box_binop(None, op, lhs, rhs),
    MulExpr
}

Addop: Binop = {
    "+" => Binop::Add,
    "-" => Binop::Sub
}

MulExpr: Box<Expr> = {
    <lhs:MulExpr> <op:Mulop> <rhs:CastExpr> => box_binop(None, op, lhs, rhs),
    CastExpr
}

Mulop: Binop = {
    "*" => Binop::Mul,
    "/" => Binop::Div,
    "%" => Binop::Rem,
    "/u" => Binop::UDiv,
    "%u" => Binop::URem
}

CastExpr: Box<Expr> = {
    <expr:CastExpr> "as" <ty:Type> => box_cast(expr, ty),
    UnaryExpr
}

UnaryExpr: Box<Expr> = {
    "!" <e:UnaryExpr> => box_unop(None, Unop::Not, e),
    "~" <e:UnaryExpr> => box_unop(None, Unop::BitNot, e),
    "-" <e:UnaryExpr> => box_unop(None, Unop::Neg, e),
    PrimaryExpr
}

PrimaryExpr: Box<Expr> = {
    "if" <test:Expr> <consequent:Block> "else" <alternate:Block> => {
        box_if(test, consequent, alternate)
    },
    "while" <test:Expr> <body:Block> => {
        Box::new(Expr{ty: None, u:Uxpr::While{test,body}})
    },
    "loop" <break_label:Id> <body:Block> => {
        Box::new(Expr{ty: None, u:Uxpr::Loop{break_label, body}})
    },
    "break" <label:Id> => {
        Box::new(Expr{ty: None, u:Uxpr::Break{label}})
    },
    "(" <e:Expr> ")" => {
        e
    },
    "null" => {
        Box::new(Expr{ty: Some(Type::AnyRef), u:Uxpr::NullLit})
    },
    <name:Id> <actuals:Actuals?> => {
        if let Some(actuals) = actuals {
            Box::new(Expr{ty: None, u:Uxpr::Call{name, actuals}})
        } else {
            Box::new(Expr{ty: None, u:Uxpr::Id(name)})
        }
    },
    <n:IntLit> => {
        let bs = n.as_bytes();
        match char::from(bs[bs.len()-1]) {
            'i' | 'I' => {
                match i32::from_str_radix(&n[..n.len()-1], 10) {
                    Ok(v) => Box::new(Expr{ty:Some(Type::I32), u:Uxpr::NumLit(Number::I32(v))}),
                    Err(_) => panic!("Not a valid i32 literal {}", n)
                }
            }
            'l' | 'L' => {
                match i64::from_str_radix(&n[..n.len()-1], 10) {
                    Ok(v) => Box::new(Expr{ty:Some(Type::I64), u:Uxpr::NumLit(Number::I64(v))}),
                    Err(_) => panic!("Not a valid i64 literal {}", n)
                }
            }
            _ => {
                match i32::from_str_radix(&n, 10) {
                    Ok(v) => Box::new(Expr{ty:Some(Type::I32), u:Uxpr::NumLit(Number::I32(v))}),
                    Err(_) => panic!("Not a valid int literal {}", n)
                }
            }
        }
    },
    <n:FloatLit> => {
        let bs = n.as_bytes();
        match char::from(bs[bs.len()-1]) {
            'f' | 'F' => {
                match f32::from_str(&n[..n.len()-1]) {
                    Ok(v) => Box::new(Expr{ty:Some(Type::F32), u:Uxpr::NumLit(Number::F32(v))}),
                    Err(_) => panic!("Not a valid f32 literal {}", n)
                }
            }
            'd' | 'D' => {
                match f64::from_str(&n[..n.len()-1]) {
                    Ok(v) => Box::new(Expr{ty:Some(Type::F64), u:Uxpr::NumLit(Number::F64(v))}),
                    Err(_) => panic!("Not a valid f64 literal {}", n)
                }
            }
            _ => {
                match f64::from_str(&n) {
                    Ok(v) => Box::new(Expr{ty:Some(Type::F64), u:Uxpr::NumLit(Number::F64(v))}),
                    Err(_) => panic!("Not a valid f64 literal {}", n)
                }
            }
        }
    }
}

Actuals: Vec<Box<Expr>> = {
    "(" <es:(<Expr> ",")*> <e:Expr?> ")" =>
        match e {
            None => es,
            Some(x) => { let mut v = es; v.push(x); v }
        }
}
    
// Rough lexical analysis.  The JSItem does not work, nor will string literals
// work.  We will need to have a custom lexer.

// Note no leading underscore is allowed in names

Name: String = <s:r"[a-zA-Z][a-zA-Z_0-9]*"> => String::from_str(s).unwrap();
IntLit: String = <s:r"[0-9]+[iIlL]?"> => String::from_str(s).unwrap();
FloatLit: String = <s:r"[0-9]+[fFdD]|[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?[fFdD]?"> => String::from_str(s).unwrap();
JSItem: String = <s:r"js<!<.*>!>"> => String::from_str(s).unwrap();
